{"ast":null,"code":"import { collection, doc, getDoc, getDocs, getFirestore, setDoc, updateDoc } from 'firebase/firestore';\nimport { initializeApp } from 'firebase/app';\n\n// const cargoShipments = [\n//   {\n//     id: '1',\n//     shipmentNum: 'ABC123',\n//     originCity: 'Київ',\n//     originCountry: 'Україна',\n//     destinationCity: 'Лондон',\n//     destinationCountry: 'Велика Британія',\n//     originRoute: { lat: 50.4501, lng: 30.5234 },\n//     destinationRoute: { lat: 51.5074, lng: -0.1276 },\n//     weight: [1000, 30],\n//     statusShip: 'В очікуванні',\n//     originDate: '2023-05-01',\n//     destinationDate: '2023-05-10',\n//     isInternational: true,\n//     distance: 2000,\n//     cost: [5000, 1000],\n//     client: ['John Doe', 'John Doe1'],\n//   },\n//   {\n//     id: '2',\n//     shipmentNum: 'DEF456',\n//     originCity: 'Париж',\n//     originCountry: 'Франція',\n//     destinationCity: 'Мадрид',\n//     destinationCountry: 'Іспанія',\n//     originRoute: { lat: 48.8566, lng: 2.3522 },\n//     destinationRoute: { lat: 40.4168, lng: -3.7038 },\n//     weight: [1500],\n//     statusShip: 'В очікуванні',\n//     originDate: '2023-07-01',\n//     destinationDate: '2023-07-10',\n//     isInternational: true,\n//     distance: 1500,\n//     cost: [7000],\n//     client: ['Jane Smith'],\n//   },\n//   {\n//     id: '3',\n//     shipmentNum: 'GHI789',\n//     originCity: 'Токіо',\n//     originCountry: 'Японія',\n//     destinationCity: 'Сідней',\n//     destinationCountry: 'Австралія',\n//     originRoute: { lat: 35.6895, lng: 139.6917 },\n//     destinationRoute: { lat: -33.8688, lng: 151.2093 },\n//     weight: [2000],\n//     statusShip: 'В процесі',\n//     originDate: '2023-04-01',\n//     destinationDate: '2023-04-10',\n//     isInternational: true,\n//     distance: 8000,\n//     cost: [10000],\n//     client: ['David Johnson'],\n//   },\n//   {\n//     id: '4',\n//     shipmentNum: 'JKL012',\n//     originCity: 'Нью-Йорк',\n//     originCountry: 'США',\n//     destinationCity: 'Торонто',\n//     destinationCountry: 'Канада',\n//     originRoute: { lat: 40.7128, lng: -74.006 },\n//     destinationRoute: { lat: 43.6532, lng: -79.3832 },\n//     weight: [1200],\n//     statusShip: 'Завершено',\n//     originDate: '2023-09-01',\n//     destinationDate: '2023-09-10',\n//     isInternational: true,\n//     distance: 500,\n//     cost: [3000],\n//     client: ['Emily Wilson'],\n//   },\n//   {\n//     id: '5',\n//     shipmentNum: 'MNO345',\n//     originCity: 'Берлін',\n//     originCountry: 'Німеччина',\n//     destinationCity: 'Рим',\n//     destinationCountry: 'Італія',\n//     originRoute: { lat: 52.52, lng: 13.4049 },\n//     destinationRoute: { lat: 41.9028, lng: 12.4964 },\n//     weight: [800],\n//     statusShip: 'В процесі',\n//     originDate: '2022-11-21',\n//     destinationDate: '2023-11-25',\n//     isInternational: true,\n//     distance: 1000,\n//     cost: [4000],\n//     client: ['Michael Brown'],\n//   },\n//   {\n//     id: '6',\n//     shipmentNum: 'PQR678',\n//     originCity: 'Сіетл',\n//     originCountry: 'США',\n//     destinationCity: 'Ванкувер',\n//     destinationCountry: 'Канада',\n//     originRoute: { lat: 47.6062, lng: -122.3321 },\n//     destinationRoute: { lat: 49.2827, lng: -123.1207 },\n//     weight: [900],\n//     statusShip: 'В процесі',\n//     originDate: '2023-11-01',\n//     destinationDate: '2023-11-10',\n//     isInternational: true,\n//     distance: 300,\n//     cost: [2000],\n//     client: ['Sophia Davis'],\n//   },\n//   {\n//     id: '7',\n//     shipmentNum: 'STU901',\n//     originCity: 'Сідней',\n//     originCountry: 'Австралія',\n//     destinationCity: 'Акланд',\n//     destinationCountry: 'Нова Зеландія',\n//     originRoute: { lat: -33.8688, lng: 151.2093 },\n//     destinationRoute: { lat: -36.8485, lng: 174.7633 },\n//     weight: [1800],\n//     statusShip: 'Завершено',\n//     originDate: '2023-05-29',\n//     destinationDate: '2023-06-05',\n//     isInternational: true,\n//     distance: 1200,\n//     cost: [6000],\n//     client: ['Olivia Wilson'],\n//   },\n//   {\n//     id: '8',\n//     shipmentNum: 'VWX234',\n//     originCity: 'Мельбурн',\n//     originCountry: 'Австралія',\n//     destinationCity: 'Веллінгтон',\n//     destinationCountry: 'Нова Зеландія',\n//     originRoute: { lat: -37.8136, lng: 144.9631 },\n//     destinationRoute: { lat: -41.2865, lng: 174.7762 },\n//     weight: [1600],\n//     statusShip: 'В процесі',\n//     originDate: '2024-01-01',\n//     destinationDate: '2024-01-10',\n//     isInternational: true,\n//     distance: 1300,\n//     cost: [5500],\n//     client: ['William Thompson'],\n//   },\n//   {\n//     id: '9',\n//     shipmentNum: 'YZA567',\n//     originCity: 'Торонто',\n//     originCountry: 'Канада',\n//     destinationCity: 'Монреаль',\n//     destinationCountry: 'Канада',\n//     originRoute: { lat: 43.6532, lng: -79.3832 },\n//     destinationRoute: { lat: 45.5017, lng: -73.5673 },\n//     weight: [1100],\n//     statusShip: 'Завершено',\n//     originDate: '2023-05-31',\n//     destinationDate: '2023-06-10',\n//     isInternational: false,\n//     distance: 350,\n//     cost: [2500],\n//     client: ['Sophia Johnson'],\n//   },\n//   {\n//     id: '10',\n//     shipmentNum: 'BCD789',\n//     originCity: 'Лондон',\n//     originCountry: 'Велика Британія',\n//     destinationCity: 'Париж',\n//     destinationCountry: 'Франція',\n//     originRoute: { lat: 51.5074, lng: -0.1276 },\n//     destinationRoute: { lat: 48.8566, lng: 2.3522 },\n//     weight: [1400],\n//     statusShip: 'В процесі',\n//     originDate: '2024-03-01',\n//     destinationDate: '2024-03-10',\n//     isInternational: true,\n//     distance: 400,\n//     cost: [3500],\n//     client: ['Daniel Anderson'],\n//   },\n// ];\n\nconst reviews = [{\n  id: '1',\n  author: 'Іван Петров',\n  content: 'Дуже задоволений послугами LOGICTRANS. Швидка доставка і висока якість обслуговування.'\n}, {\n  id: '2',\n  author: 'Олена Сидоренко',\n  content: 'Завжди надійна компанія для наших логістичних потреб. Рекомендую LOGICTRANS усім!'\n}];\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC98VQ3rNvIgsY4elcV2uKxYu9lB0jkxbs',\n  authDomain: 'logistic-77f46.firebaseapp.com',\n  projectId: 'logistic-77f46',\n  storageBucket: 'logistic-77f46.appspot.com',\n  messagingSenderId: '981152076117',\n  appId: '1:981152076117:web:c646983c427797e4f51fdc',\n  measurementId: 'G-LLJ96HRJ02'\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nexport const addOrders = async shipment => {\n  await setDoc(doc(db, 'shipments', shipment.id), shipment);\n};\nexport const addReviews = async review => {\n  await setDoc(doc(db, 'reviews', review.id), review);\n};\nexport function generateSumString(array) {\n  let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let elements = '';\n  const sum = array.reduce((acc, curr) => acc + Number(curr), 0);\n  if (array.length !== 1) {\n    elements = '(' + generateString(array, text) + text + ')';\n  }\n  return `${sum} ${text} ${elements} `;\n}\nexport function generateString(array) {\n  let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (array.lengh !== 1) {\n    return array.join(`${text}, `);\n  } else {\n    return array[0];\n  }\n}\nexport const updateStatusBasedOnDate = async shipments => {\n  const currentDate = new Date();\n  const updatedShipments = await Promise.all(shipments.map(async shipment => {\n    const {\n      id,\n      originDate,\n      destinationDate\n    } = shipment;\n    const shipmentRef = doc(db, 'shipments', id);\n    let updatedStatus = 'В процесі';\n    const originDateObj = new Date(originDate);\n    const destinationDateObj = new Date(destinationDate);\n    if (originDateObj > currentDate) {\n      updatedStatus = 'В очікуванні';\n    } else if (destinationDateObj < currentDate) {\n      updatedStatus = 'Виконано';\n    }\n    await updateDoc(shipmentRef, {\n      statusShip: updatedStatus\n    });\n    return {\n      ...shipment,\n      statusShip: updatedStatus\n    };\n  }));\n  return updatedShipments;\n};\nexport const changeId = async arrId => {};\nexport const getReviews = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'reviews'));\n    const reviews = querySnapshot.docs.map(doc => {\n      return doc.data();\n    });\n    return reviews;\n  } catch (error) {\n    console.error('Помилка при отриманні даних з Firestore:', error);\n    return [];\n  }\n};\nexport const getOrders = async () => {\n  try {\n    const querySnapshot = await getDocs(collection(db, 'shipments'));\n    const shipments = querySnapshot.docs.map(doc => {\n      return doc.data();\n    });\n    return shipments;\n  } catch (error) {\n    console.error('Помилка при отриманні даних з Firestore:', error);\n    return [];\n  }\n};\nexport const getOrderById = async id => {\n  try {\n    const docRef = doc(db, 'shipments', id);\n    const docSnapshot = await getDoc(docRef);\n    if (docSnapshot.exists()) {\n      return docSnapshot.data();\n    } else {\n      console.log('Документ не знайдено!');\n      return null;\n    }\n  } catch (error) {\n    console.error('Помилка при отриманні даних з Firestore:', error);\n    return null;\n  }\n};\nexport const getInternational = (origin, destination) => {\n  return origin !== destination;\n};\nexport const handleSaveToFireStorage = () => {\n  reviews.map(async review => {\n    await addReviews(review);\n  });\n};\nexport const isInternational = shipment => {\n  return shipment.origin.country !== shipment.destination.country;\n};\nexport const getcentrMap = shipment => {\n  const centerLat = (shipment.originRoute.lat + shipment.destinationRoute.lat) / 2;\n  const centerLng = (shipment.originRoute.lng + shipment.destinationRoute.lng) / 2;\n  return [centerLng, centerLat];\n};\nexport function getDistance(originRoute, destinationRoute) {\n  const earthRadius = 6371; // Радіус Землі в кілометрах\n\n  const dLat = toRadians(destinationRoute.lat - originRoute.lat);\n  const dLon = toRadians(destinationRoute.lng - originRoute.lng);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(toRadians(originRoute.lat)) * Math.cos(toRadians(destinationRoute.lat)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = earthRadius * c;\n  return Math.round(distance);\n}\nfunction toRadians(degrees) {\n  return degrees * (Math.PI / 180);\n}\nexport function getZoom(distance) {\n  if (distance > 1800) {\n    return 1;\n  }\n  if (distance > 1400) {\n    return 2;\n  }\n  if (distance > 1000) {\n    return 3;\n  }\n  if (distance > 500) {\n    return 4;\n  }\n  return 5;\n}\nexport function getdestinationDate(distance, originDate) {\n  const currentDate = new Date(originDate);\n  if (distance > 2500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 8);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1800) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 6);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1400) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 4);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 1000) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 3);\n    return formatDate(deliveryDate);\n  }\n  if (distance > 500) {\n    const deliveryDate = new Date(currentDate);\n    deliveryDate.setDate(currentDate.getDate() + 2);\n    return formatDate(deliveryDate);\n  }\n  const deliveryDate = new Date(currentDate);\n  deliveryDate.setDate(currentDate.getDate() + 1);\n  return formatDate(deliveryDate);\n}\nfunction formatDate(date) {\n  const year = date.getFullYear();\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\n  const day = date.getDate().toString().padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nexport function calculateShippingCost(distance, weight, pricePerKilometer, transportType) {\n  let baseCost = distance * pricePerKilometer;\n  if (transportType) {\n    baseCost *= 1.5;\n  } else {\n    baseCost *= 1;\n  }\n  if (weight > 1000) {\n    const overweightCharge = (weight - 1000) * 0.5;\n    baseCost += overweightCharge;\n  }\n  return Math.round(baseCost);\n}","map":{"version":3,"names":["collection","doc","getDoc","getDocs","getFirestore","setDoc","updateDoc","initializeApp","reviews","id","author","content","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","db","addOrders","shipment","addReviews","review","generateSumString","array","text","arguments","length","undefined","elements","sum","reduce","acc","curr","Number","generateString","lengh","join","updateStatusBasedOnDate","shipments","currentDate","Date","updatedShipments","Promise","all","map","originDate","destinationDate","shipmentRef","updatedStatus","originDateObj","destinationDateObj","statusShip","changeId","arrId","getReviews","querySnapshot","docs","data","error","console","getOrders","getOrderById","docRef","docSnapshot","exists","log","getInternational","origin","destination","handleSaveToFireStorage","isInternational","country","getcentrMap","centerLat","originRoute","lat","destinationRoute","centerLng","lng","getDistance","earthRadius","dLat","toRadians","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","round","degrees","PI","getZoom","getdestinationDate","deliveryDate","setDate","getDate","formatDate","date","year","getFullYear","month","getMonth","toString","padStart","day","calculateShippingCost","weight","pricePerKilometer","transportType","baseCost","overweightCharge"],"sources":["C:/vscode/logistik-company/src/fakeApi.js"],"sourcesContent":["import {\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  getFirestore,\r\n  setDoc,\r\n  updateDoc,\r\n} from 'firebase/firestore';\r\nimport { initializeApp } from 'firebase/app';\r\n\r\n// const cargoShipments = [\r\n//   {\r\n//     id: '1',\r\n//     shipmentNum: 'ABC123',\r\n//     originCity: 'Київ',\r\n//     originCountry: 'Україна',\r\n//     destinationCity: 'Лондон',\r\n//     destinationCountry: 'Велика Британія',\r\n//     originRoute: { lat: 50.4501, lng: 30.5234 },\r\n//     destinationRoute: { lat: 51.5074, lng: -0.1276 },\r\n//     weight: [1000, 30],\r\n//     statusShip: 'В очікуванні',\r\n//     originDate: '2023-05-01',\r\n//     destinationDate: '2023-05-10',\r\n//     isInternational: true,\r\n//     distance: 2000,\r\n//     cost: [5000, 1000],\r\n//     client: ['John Doe', 'John Doe1'],\r\n//   },\r\n//   {\r\n//     id: '2',\r\n//     shipmentNum: 'DEF456',\r\n//     originCity: 'Париж',\r\n//     originCountry: 'Франція',\r\n//     destinationCity: 'Мадрид',\r\n//     destinationCountry: 'Іспанія',\r\n//     originRoute: { lat: 48.8566, lng: 2.3522 },\r\n//     destinationRoute: { lat: 40.4168, lng: -3.7038 },\r\n//     weight: [1500],\r\n//     statusShip: 'В очікуванні',\r\n//     originDate: '2023-07-01',\r\n//     destinationDate: '2023-07-10',\r\n//     isInternational: true,\r\n//     distance: 1500,\r\n//     cost: [7000],\r\n//     client: ['Jane Smith'],\r\n//   },\r\n//   {\r\n//     id: '3',\r\n//     shipmentNum: 'GHI789',\r\n//     originCity: 'Токіо',\r\n//     originCountry: 'Японія',\r\n//     destinationCity: 'Сідней',\r\n//     destinationCountry: 'Австралія',\r\n//     originRoute: { lat: 35.6895, lng: 139.6917 },\r\n//     destinationRoute: { lat: -33.8688, lng: 151.2093 },\r\n//     weight: [2000],\r\n//     statusShip: 'В процесі',\r\n//     originDate: '2023-04-01',\r\n//     destinationDate: '2023-04-10',\r\n//     isInternational: true,\r\n//     distance: 8000,\r\n//     cost: [10000],\r\n//     client: ['David Johnson'],\r\n//   },\r\n//   {\r\n//     id: '4',\r\n//     shipmentNum: 'JKL012',\r\n//     originCity: 'Нью-Йорк',\r\n//     originCountry: 'США',\r\n//     destinationCity: 'Торонто',\r\n//     destinationCountry: 'Канада',\r\n//     originRoute: { lat: 40.7128, lng: -74.006 },\r\n//     destinationRoute: { lat: 43.6532, lng: -79.3832 },\r\n//     weight: [1200],\r\n//     statusShip: 'Завершено',\r\n//     originDate: '2023-09-01',\r\n//     destinationDate: '2023-09-10',\r\n//     isInternational: true,\r\n//     distance: 500,\r\n//     cost: [3000],\r\n//     client: ['Emily Wilson'],\r\n//   },\r\n//   {\r\n//     id: '5',\r\n//     shipmentNum: 'MNO345',\r\n//     originCity: 'Берлін',\r\n//     originCountry: 'Німеччина',\r\n//     destinationCity: 'Рим',\r\n//     destinationCountry: 'Італія',\r\n//     originRoute: { lat: 52.52, lng: 13.4049 },\r\n//     destinationRoute: { lat: 41.9028, lng: 12.4964 },\r\n//     weight: [800],\r\n//     statusShip: 'В процесі',\r\n//     originDate: '2022-11-21',\r\n//     destinationDate: '2023-11-25',\r\n//     isInternational: true,\r\n//     distance: 1000,\r\n//     cost: [4000],\r\n//     client: ['Michael Brown'],\r\n//   },\r\n//   {\r\n//     id: '6',\r\n//     shipmentNum: 'PQR678',\r\n//     originCity: 'Сіетл',\r\n//     originCountry: 'США',\r\n//     destinationCity: 'Ванкувер',\r\n//     destinationCountry: 'Канада',\r\n//     originRoute: { lat: 47.6062, lng: -122.3321 },\r\n//     destinationRoute: { lat: 49.2827, lng: -123.1207 },\r\n//     weight: [900],\r\n//     statusShip: 'В процесі',\r\n//     originDate: '2023-11-01',\r\n//     destinationDate: '2023-11-10',\r\n//     isInternational: true,\r\n//     distance: 300,\r\n//     cost: [2000],\r\n//     client: ['Sophia Davis'],\r\n//   },\r\n//   {\r\n//     id: '7',\r\n//     shipmentNum: 'STU901',\r\n//     originCity: 'Сідней',\r\n//     originCountry: 'Австралія',\r\n//     destinationCity: 'Акланд',\r\n//     destinationCountry: 'Нова Зеландія',\r\n//     originRoute: { lat: -33.8688, lng: 151.2093 },\r\n//     destinationRoute: { lat: -36.8485, lng: 174.7633 },\r\n//     weight: [1800],\r\n//     statusShip: 'Завершено',\r\n//     originDate: '2023-05-29',\r\n//     destinationDate: '2023-06-05',\r\n//     isInternational: true,\r\n//     distance: 1200,\r\n//     cost: [6000],\r\n//     client: ['Olivia Wilson'],\r\n//   },\r\n//   {\r\n//     id: '8',\r\n//     shipmentNum: 'VWX234',\r\n//     originCity: 'Мельбурн',\r\n//     originCountry: 'Австралія',\r\n//     destinationCity: 'Веллінгтон',\r\n//     destinationCountry: 'Нова Зеландія',\r\n//     originRoute: { lat: -37.8136, lng: 144.9631 },\r\n//     destinationRoute: { lat: -41.2865, lng: 174.7762 },\r\n//     weight: [1600],\r\n//     statusShip: 'В процесі',\r\n//     originDate: '2024-01-01',\r\n//     destinationDate: '2024-01-10',\r\n//     isInternational: true,\r\n//     distance: 1300,\r\n//     cost: [5500],\r\n//     client: ['William Thompson'],\r\n//   },\r\n//   {\r\n//     id: '9',\r\n//     shipmentNum: 'YZA567',\r\n//     originCity: 'Торонто',\r\n//     originCountry: 'Канада',\r\n//     destinationCity: 'Монреаль',\r\n//     destinationCountry: 'Канада',\r\n//     originRoute: { lat: 43.6532, lng: -79.3832 },\r\n//     destinationRoute: { lat: 45.5017, lng: -73.5673 },\r\n//     weight: [1100],\r\n//     statusShip: 'Завершено',\r\n//     originDate: '2023-05-31',\r\n//     destinationDate: '2023-06-10',\r\n//     isInternational: false,\r\n//     distance: 350,\r\n//     cost: [2500],\r\n//     client: ['Sophia Johnson'],\r\n//   },\r\n//   {\r\n//     id: '10',\r\n//     shipmentNum: 'BCD789',\r\n//     originCity: 'Лондон',\r\n//     originCountry: 'Велика Британія',\r\n//     destinationCity: 'Париж',\r\n//     destinationCountry: 'Франція',\r\n//     originRoute: { lat: 51.5074, lng: -0.1276 },\r\n//     destinationRoute: { lat: 48.8566, lng: 2.3522 },\r\n//     weight: [1400],\r\n//     statusShip: 'В процесі',\r\n//     originDate: '2024-03-01',\r\n//     destinationDate: '2024-03-10',\r\n//     isInternational: true,\r\n//     distance: 400,\r\n//     cost: [3500],\r\n//     client: ['Daniel Anderson'],\r\n//   },\r\n// ];\r\n\r\nconst reviews = [\r\n  {\r\n    id: '1',\r\n    author: 'Іван Петров',\r\n    content:\r\n      'Дуже задоволений послугами LOGICTRANS. Швидка доставка і висока якість обслуговування.',\r\n  },\r\n  {\r\n    id: '2',\r\n    author: 'Олена Сидоренко',\r\n    content:\r\n      'Завжди надійна компанія для наших логістичних потреб. Рекомендую LOGICTRANS усім!',\r\n  },\r\n];\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyC98VQ3rNvIgsY4elcV2uKxYu9lB0jkxbs',\r\n  authDomain: 'logistic-77f46.firebaseapp.com',\r\n  projectId: 'logistic-77f46',\r\n  storageBucket: 'logistic-77f46.appspot.com',\r\n  messagingSenderId: '981152076117',\r\n  appId: '1:981152076117:web:c646983c427797e4f51fdc',\r\n  measurementId: 'G-LLJ96HRJ02',\r\n};\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\n\r\nexport const addOrders = async shipment => {\r\n  await setDoc(doc(db, 'shipments', shipment.id), shipment);\r\n};\r\nexport const addReviews = async review => {\r\n  await setDoc(doc(db, 'reviews', review.id), review);\r\n};\r\nexport function generateSumString(array, text = '') {\r\n  let elements = '';\r\n  const sum = array.reduce((acc, curr) => acc + Number(curr), 0);\r\n  if (array.length !== 1) {\r\n    elements = '(' + generateString(array, text) + text + ')';\r\n  }\r\n  return `${sum} ${text} ${elements} `;\r\n}\r\nexport function generateString(array, text = '') {\r\n  if (array.lengh !== 1) {\r\n    return array.join(`${text}, `);\r\n  } else {\r\n    return array[0];\r\n  }\r\n}\r\n\r\nexport const updateStatusBasedOnDate = async shipments => {\r\n  const currentDate = new Date();\r\n\r\n  const updatedShipments = await Promise.all(\r\n    shipments.map(async shipment => {\r\n      const { id, originDate, destinationDate } = shipment;\r\n      const shipmentRef = doc(db, 'shipments', id);\r\n\r\n      let updatedStatus = 'В процесі';\r\n      const originDateObj = new Date(originDate);\r\n      const destinationDateObj = new Date(destinationDate);\r\n\r\n      if (originDateObj > currentDate) {\r\n        updatedStatus = 'В очікуванні';\r\n      } else if (destinationDateObj < currentDate) {\r\n        updatedStatus = 'Виконано';\r\n      }\r\n\r\n      await updateDoc(shipmentRef, {\r\n        statusShip: updatedStatus,\r\n      });\r\n\r\n      return { ...shipment, statusShip: updatedStatus };\r\n    })\r\n  );\r\n\r\n  return updatedShipments;\r\n};\r\nexport const changeId = async arrId => {};\r\nexport const getReviews = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, 'reviews'));\r\n    const reviews = querySnapshot.docs.map(doc => {\r\n      return doc.data();\r\n    });\r\n    return reviews;\r\n  } catch (error) {\r\n    console.error('Помилка при отриманні даних з Firestore:', error);\r\n    return [];\r\n  }\r\n};\r\nexport const getOrders = async () => {\r\n  try {\r\n    const querySnapshot = await getDocs(collection(db, 'shipments'));\r\n    const shipments = querySnapshot.docs.map(doc => {\r\n      return doc.data();\r\n    });\r\n    return shipments;\r\n  } catch (error) {\r\n    console.error('Помилка при отриманні даних з Firestore:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const getOrderById = async id => {\r\n  try {\r\n    const docRef = doc(db, 'shipments', id);\r\n    const docSnapshot = await getDoc(docRef);\r\n\r\n    if (docSnapshot.exists()) {\r\n      return docSnapshot.data();\r\n    } else {\r\n      console.log('Документ не знайдено!');\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Помилка при отриманні даних з Firestore:', error);\r\n    return null;\r\n  }\r\n};\r\nexport const getInternational = (origin, destination) => {\r\n  return origin !== destination;\r\n};\r\n\r\nexport const handleSaveToFireStorage = () => {\r\n  reviews.map(async review => {\r\n    await addReviews(review);\r\n  });\r\n};\r\n\r\nexport const isInternational = shipment => {\r\n  return shipment.origin.country !== shipment.destination.country;\r\n};\r\nexport const getcentrMap = shipment => {\r\n  const centerLat =\r\n    (shipment.originRoute.lat + shipment.destinationRoute.lat) / 2;\r\n  const centerLng =\r\n    (shipment.originRoute.lng + shipment.destinationRoute.lng) / 2;\r\n  return [centerLng, centerLat];\r\n};\r\n\r\nexport function getDistance(originRoute, destinationRoute) {\r\n  const earthRadius = 6371; // Радіус Землі в кілометрах\r\n\r\n  const dLat = toRadians(destinationRoute.lat - originRoute.lat);\r\n  const dLon = toRadians(destinationRoute.lng - originRoute.lng);\r\n\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(toRadians(originRoute.lat)) *\r\n      Math.cos(toRadians(destinationRoute.lat)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = earthRadius * c;\r\n\r\n  return Math.round(distance);\r\n}\r\n\r\nfunction toRadians(degrees) {\r\n  return degrees * (Math.PI / 180);\r\n}\r\nexport function getZoom(distance) {\r\n  if (distance > 1800) {\r\n    return 1;\r\n  }\r\n  if (distance > 1400) {\r\n    return 2;\r\n  }\r\n  if (distance > 1000) {\r\n    return 3;\r\n  }\r\n\r\n  if (distance > 500) {\r\n    return 4;\r\n  }\r\n  return 5;\r\n}\r\nexport function getdestinationDate(distance, originDate) {\r\n  const currentDate = new Date(originDate);\r\n\r\n  if (distance > 2500) {\r\n    const deliveryDate = new Date(currentDate);\r\n    deliveryDate.setDate(currentDate.getDate() + 8);\r\n    return formatDate(deliveryDate);\r\n  }\r\n  if (distance > 1800) {\r\n    const deliveryDate = new Date(currentDate);\r\n    deliveryDate.setDate(currentDate.getDate() + 6);\r\n    return formatDate(deliveryDate);\r\n  }\r\n  if (distance > 1400) {\r\n    const deliveryDate = new Date(currentDate);\r\n    deliveryDate.setDate(currentDate.getDate() + 4);\r\n    return formatDate(deliveryDate);\r\n  }\r\n  if (distance > 1000) {\r\n    const deliveryDate = new Date(currentDate);\r\n    deliveryDate.setDate(currentDate.getDate() + 3);\r\n    return formatDate(deliveryDate);\r\n  }\r\n  if (distance > 500) {\r\n    const deliveryDate = new Date(currentDate);\r\n    deliveryDate.setDate(currentDate.getDate() + 2);\r\n    return formatDate(deliveryDate);\r\n  }\r\n\r\n  const deliveryDate = new Date(currentDate);\r\n  deliveryDate.setDate(currentDate.getDate() + 1);\r\n  return formatDate(deliveryDate);\r\n}\r\n\r\nfunction formatDate(date) {\r\n  const year = date.getFullYear();\r\n  const month = (date.getMonth() + 1).toString().padStart(2, '0');\r\n  const day = date.getDate().toString().padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport function calculateShippingCost(\r\n  distance,\r\n  weight,\r\n  pricePerKilometer,\r\n  transportType\r\n) {\r\n  let baseCost = distance * pricePerKilometer;\r\n\r\n  if (transportType) {\r\n    baseCost *= 1.5;\r\n  } else {\r\n    baseCost *= 1;\r\n  }\r\n\r\n  if (weight > 1000) {\r\n    const overweightCharge = (weight - 1000) * 0.5;\r\n    baseCost += overweightCharge;\r\n  }\r\n\r\n  return Math.round(baseCost);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}